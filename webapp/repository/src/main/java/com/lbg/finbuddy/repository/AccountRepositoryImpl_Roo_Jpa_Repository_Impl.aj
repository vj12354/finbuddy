// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lbg.finbuddy.repository;

import com.lbg.finbuddy.model.Account;
import com.lbg.finbuddy.model.QAccount;
import com.lbg.finbuddy.repository.AccountRepositoryCustom;
import com.lbg.finbuddy.repository.AccountRepositoryImpl;
import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;

privileged aspect AccountRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare parents: AccountRepositoryImpl implements AccountRepositoryCustom;
    
    declare @type: AccountRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String AccountRepositoryImpl.NOMBER = "nomber";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String AccountRepositoryImpl.SORTCODE = "sortcode";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String AccountRepositoryImpl.CUSTOMER = "customer";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Account> AccountRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QAccount account = QAccount.account;
        
        JPQLQuery<Account> query = from(account);
        
        Path<?>[] paths = new Path<?>[] {account.nomber,account.sortcode,account.customer};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(NOMBER, account.nomber)
			.map(SORTCODE, account.sortcode)
			.map(CUSTOMER, account.customer);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, account);
    }
    
}
