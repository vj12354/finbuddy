// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.lbg.finbuddy.repository;

import com.lbg.finbuddy.model.QTxn;
import com.lbg.finbuddy.model.Txn;
import com.lbg.finbuddy.repository.TxnRepositoryCustom;
import com.lbg.finbuddy.repository.TxnRepositoryImpl;
import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;

privileged aspect TxnRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare parents: TxnRepositoryImpl implements TxnRepositoryCustom;
    
    declare @type: TxnRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String TxnRepositoryImpl.TX_DATE = "txDate";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String TxnRepositoryImpl.AMOUNT = "amount";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String TxnRepositoryImpl.DESCRIPTION = "description";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String TxnRepositoryImpl.ACCOUNT = "account";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Txn> TxnRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QTxn txn = QTxn.txn;
        
        JPQLQuery<Txn> query = from(txn);
        
        Path<?>[] paths = new Path<?>[] {txn.txDate,txn.amount,txn.description,txn.account};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(TX_DATE, txn.txDate)
			.map(AMOUNT, txn.amount)
			.map(DESCRIPTION, txn.description)
			.map(ACCOUNT, txn.account);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, txn);
    }
    
}
